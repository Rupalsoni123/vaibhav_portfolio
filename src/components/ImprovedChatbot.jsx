import React, { useState, useRef, useEffect, useContext } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ThemeContext } from '../utils/ThemeContext';
import amazonQ from '../utils/amazonQIntegration';

const ImprovedChatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [amazonQStatus, setAmazonQStatus] = useState({ available: false });
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "üëã **Hello! I'm Amazon Q, your AI assistant.**\n\nI'm here to help you with a wide range of topics including:\n\n**üîß Software Development:**\n‚Ä¢ Code generation and debugging\n‚Ä¢ Best practices and architecture\n‚Ä¢ Programming languages and frameworks\n‚Ä¢ Code reviews and optimization\n\n**‚òÅÔ∏è AWS & Cloud:**\n‚Ä¢ AWS services and solutions\n‚Ä¢ Cloud architecture and design\n‚Ä¢ DevOps and infrastructure\n‚Ä¢ Cost optimization and security\n\n**üìö General Knowledge:**\n‚Ä¢ Technical explanations and tutorials\n‚Ä¢ Problem-solving and troubleshooting\n‚Ä¢ Research and analysis\n‚Ä¢ Learning and skill development\n\n**üí° How I can help:**\n‚Ä¢ Answer technical questions with detailed explanations\n‚Ä¢ Provide code examples and solutions\n‚Ä¢ Explain complex concepts in simple terms\n‚Ä¢ Offer best practices and recommendations\n‚Ä¢ Help with learning and skill development\n\nWhat would you like to know or work on today?",
      isBot: true,
      timestamp: new Date()
    }
  ]);
  const [isTyping, setIsTyping] = useState(false);
  const [message, setMessage] = useState('');
  const [conversationContext, setConversationContext] = useState([]);
  const messagesEndRef = useRef(null);
  const { theme } = useContext(ThemeContext);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
    
    // Check Amazon Q availability on component mount
    amazonQ.checkAvailability().then(status => {
      setAmazonQStatus(status);
      console.log('Amazon Q CLI status:', status);
    });
  }, [messages]);

  // Check if question should use Amazon Q CLI
  const shouldUseAmazonQ = (question) => {
    return amazonQ.shouldUseAmazonQ(question) && amazonQStatus.available;
  };

  // Helper function to determine season
  const getSeason = (date) => {
    const month = date.getMonth() + 1; // getMonth() returns 0-11
    const day = date.getDate();
    
    if ((month === 12 && day >= 21) || (month <= 2) || (month === 3 && day < 20)) {
      return 'Winter ‚ùÑÔ∏è';
    } else if ((month === 3 && day >= 20) || (month <= 5) || (month === 6 && day < 21)) {
      return 'Spring üå∏';
    } else if ((month === 6 && day >= 21) || (month <= 8) || (month === 9 && day < 23)) {
      return 'Summer ‚òÄÔ∏è';
    } else {
      return 'Autumn üçÇ';
    }
  };

  // Helper function to check if year is leap year
  const isLeapYear = (year) => {
    return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);
  };

  // Generate comprehensive Amazon Q style responses for any topic
  const generateComprehensiveAmazonQResponse = (question) => {
    const lowerQuestion = question.toLowerCase();
    
    // CKA - Certified Kubernetes Administrator
    if (lowerQuestion.includes('cka') || lowerQuestion.includes('certified kubernetes administrator')) {
      return `The **Certified Kubernetes Administrator (CKA)** is a performance-based certification that validates your skills in administering Kubernetes clusters.

**Exam Overview:**
‚Ä¢ **Duration:** 2 hours
‚Ä¢ **Format:** Performance-based, hands-on tasks in a live Kubernetes environment
‚Ä¢ **Passing Score:** 66%
‚Ä¢ **Validity:** 3 years
‚Ä¢ **Cost:** $395 USD (includes one free retake)

**Key Exam Domains:**

**1. Cluster Architecture, Installation & Configuration (25%)**
‚Ä¢ Manage role-based access control (RBAC)
‚Ä¢ Use Kubeadm to install a basic cluster
‚Ä¢ Manage a highly-available Kubernetes cluster
‚Ä¢ Provision underlying infrastructure to deploy a Kubernetes cluster
‚Ä¢ Perform a version upgrade on a Kubernetes cluster using Kubeadm
‚Ä¢ Implement etcd backup and restore

**2. Workloads & Scheduling (15%)**
‚Ä¢ Understand deployments and how to perform rolling update and rollbacks
‚Ä¢ Use ConfigMaps and Secrets to configure applications
‚Ä¢ Know how to scale applications
‚Ä¢ Understand the primitives used to create robust, self-healing, application deployments
‚Ä¢ Understand how resource limits can affect Pod scheduling
‚Ä¢ Awareness of manifest management and common templating tools

**3. Services & Networking (20%)**
‚Ä¢ Understand host networking configuration on the cluster nodes
‚Ä¢ Understand connectivity between Pods
‚Ä¢ Understand ClusterIP, NodePort, LoadBalancer service types and endpoints
‚Ä¢ Know how to use Ingress controllers and Ingress resources
‚Ä¢ Know how to configure and use CoreDNS
‚Ä¢ Choose an appropriate container network interface plugin

**4. Storage (10%)**
‚Ä¢ Understand storage classes, persistent volumes
‚Ä¢ Understand volume mode, access modes and reclaim policies for volumes
‚Ä¢ Understand persistent volume claims primitive
‚Ä¢ Know how to configure applications with persistent storage

**5. Troubleshooting (30%)**
‚Ä¢ Evaluate cluster and node logging
‚Ä¢ Understand how to monitor applications
‚Ä¢ Manage container stdout & stderr logs
‚Ä¢ Troubleshoot application failure
‚Ä¢ Troubleshoot cluster component failure
‚Ä¢ Troubleshoot networking

**Preparation Strategy:**

**Hands-on Practice:**
‚Ä¢ Set up your own Kubernetes cluster using kubeadm
‚Ä¢ Practice all exam objectives in a real environment
‚Ä¢ Use kubectl extensively - memorize common commands
‚Ä¢ Practice troubleshooting scenarios regularly

**Recommended Study Resources:**
‚Ä¢ **Official Kubernetes Documentation** - Primary reference during exam
‚Ä¢ **Kubernetes the Hard Way** - Deep understanding of cluster setup
‚Ä¢ **Practice Labs:** KodeKloud, A Cloud Guru, Linux Academy
‚Ä¢ **Books:** "Kubernetes in Action" by Marko Luk≈°a

**Essential kubectl Commands to Master:**
\`\`\`bash
# Cluster management
kubectl get nodes
kubectl describe node <node-name>
kubectl drain <node-name>
kubectl uncordon <node-name>

# Pod management
kubectl get pods -A
kubectl describe pod <pod-name>
kubectl logs <pod-name>
kubectl exec -it <pod-name> -- /bin/bash

# Deployments and services
kubectl create deployment <name> --image=<image>
kubectl expose deployment <name> --port=80 --target-port=8080
kubectl scale deployment <name> --replicas=3

# Troubleshooting
kubectl get events --sort-by=.metadata.creationTimestamp
kubectl top nodes
kubectl top pods
\`\`\`

**Exam Tips:**
‚Ä¢ **Time Management:** Practice completing tasks quickly
‚Ä¢ **Bookmarks:** Prepare bookmarks for Kubernetes documentation
‚Ä¢ **Imperative Commands:** Use kubectl run, create, expose for speed
‚Ä¢ **YAML Generation:** Use --dry-run=client -o yaml to generate manifests
‚Ä¢ **Troubleshooting:** Always check logs, events, and resource status

**Career Benefits:**
‚Ä¢ Validates expertise in Kubernetes administration
‚Ä¢ High demand in DevOps and cloud engineering roles
‚Ä¢ Average salary increase of 15-25% post-certification
‚Ä¢ Recognition from CNCF (Cloud Native Computing Foundation)

Would you like me to elaborate on any specific exam domain or provide practice scenarios for particular topics?`;
    }
    
    // Kubernetes general questions
    if (lowerQuestion.includes('kubernetes') || lowerQuestion.includes('k8s')) {
      return `**Kubernetes** is an open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications.

**Core Architecture:**

**Master Components:**
‚Ä¢ **API Server (kube-apiserver)** - Central management entity, exposes Kubernetes API
‚Ä¢ **etcd** - Distributed key-value store for cluster data
‚Ä¢ **Controller Manager** - Runs controller processes (replication, endpoints, etc.)
‚Ä¢ **Scheduler** - Assigns pods to nodes based on resource requirements

**Node Components:**
‚Ä¢ **kubelet** - Agent that communicates with master and manages pods
‚Ä¢ **kube-proxy** - Network proxy maintaining network rules
‚Ä¢ **Container Runtime** - Docker, containerd, or CRI-O

**Key Objects and Resources:**

**Workload Resources:**
‚Ä¢ **Pods** - Smallest deployable units, contain one or more containers
‚Ä¢ **Deployments** - Manage replica sets and rolling updates
‚Ä¢ **StatefulSets** - For stateful applications requiring stable identities
‚Ä¢ **DaemonSets** - Ensure pods run on all (or selected) nodes
‚Ä¢ **Jobs/CronJobs** - Run batch workloads and scheduled tasks

**Service and Networking:**
‚Ä¢ **Services** - Stable network endpoints (ClusterIP, NodePort, LoadBalancer)
‚Ä¢ **Ingress** - HTTP/HTTPS routing and load balancing
‚Ä¢ **NetworkPolicies** - Control traffic flow between pods
‚Ä¢ **DNS** - Service discovery within the cluster

**Configuration and Storage:**
‚Ä¢ **ConfigMaps** - Store non-confidential configuration data
‚Ä¢ **Secrets** - Store sensitive information (passwords, tokens, keys)
‚Ä¢ **Persistent Volumes (PV)** - Cluster-wide storage resources
‚Ä¢ **Persistent Volume Claims (PVC)** - User requests for storage

**Common Use Cases:**

**Microservices Architecture:**
‚Ä¢ Deploy and manage multiple interconnected services
‚Ä¢ Independent scaling and updates for each service
‚Ä¢ Service mesh integration (Istio, Linkerd)

**CI/CD Integration:**
‚Ä¢ Automated deployment pipelines
‚Ä¢ Blue-green and canary deployments
‚Ä¢ GitOps workflows with ArgoCD or Flux

**Auto-scaling and Load Management:**
‚Ä¢ Horizontal Pod Autoscaler (HPA) based on CPU/memory
‚Ä¢ Vertical Pod Autoscaler (VPA) for resource optimization
‚Ä¢ Cluster Autoscaler for node management

**Best Practices:**

**Resource Management:**
‚Ä¢ Set resource requests and limits for all containers
‚Ä¢ Use namespaces for logical separation
‚Ä¢ Implement proper RBAC (Role-Based Access Control)
‚Ä¢ Regular backup of etcd data

**Security:**
‚Ä¢ Use non-root containers and read-only filesystems
‚Ä¢ Implement Pod Security Standards
‚Ä¢ Network segmentation with NetworkPolicies
‚Ä¢ Regular security scanning of container images

**Monitoring and Observability:**
‚Ä¢ Deploy Prometheus and Grafana for metrics
‚Ä¢ Centralized logging with ELK or EFK stack
‚Ä¢ Distributed tracing with Jaeger or Zipkin
‚Ä¢ Health checks and readiness probes

**Deployment Strategies:**
\`\`\`yaml
# Example Deployment with best practices
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: web-app
  template:
    metadata:
      labels:
        app: web-app
    spec:
      containers:
      - name: web-app
        image: nginx:1.21
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
\`\`\`

**Learning Path:**
1. **Fundamentals** - Containers, Docker basics
2. **Core Concepts** - Pods, Services, Deployments
3. **Networking** - Service types, Ingress, DNS
4. **Storage** - Volumes, PV/PVC, Storage Classes
5. **Security** - RBAC, Pod Security, Network Policies
6. **Advanced** - Custom Resources, Operators, Service Mesh

What specific aspect of Kubernetes would you like me to explain in more detail?`;
    }
    
    // Docker questions
    if (lowerQuestion.includes('docker')) {
      return `**Docker** is a containerization platform that packages applications and their dependencies into lightweight, portable containers.

**Core Concepts:**

**Images and Containers:**
‚Ä¢ **Docker Image** - Read-only template containing application code, runtime, libraries, and dependencies
‚Ä¢ **Container** - Running instance of an image, isolated from the host system
‚Ä¢ **Dockerfile** - Text file with instructions to build an image
‚Ä¢ **Registry** - Storage and distribution system for Docker images (Docker Hub, ECR, etc.)

**Docker Architecture:**
‚Ä¢ **Docker Daemon (dockerd)** - Background service managing containers
‚Ä¢ **Docker Client** - Command-line interface for interacting with daemon
‚Ä¢ **Docker Registry** - Stores and distributes Docker images
‚Ä¢ **Docker Objects** - Images, containers, networks, volumes, plugins

**Essential Docker Commands:**

**Image Management:**
\`\`\`bash
# Build image from Dockerfile
docker build -t myapp:latest .

# Pull image from registry
docker pull nginx:latest

# List local images
docker images

# Remove image
docker rmi image_name:tag

# Push image to registry
docker push myapp:latest
\`\`\`

**Container Management:**
\`\`\`bash
# Run container
docker run -d -p 8080:80 --name webserver nginx

# List running containers
docker ps

# List all containers
docker ps -a

# Stop container
docker stop container_name

# Remove container
docker rm container_name

# Execute command in running container
docker exec -it container_name /bin/bash

# View container logs
docker logs container_name
\`\`\`

**Dockerfile Best Practices:**

**Multi-stage Builds:**
\`\`\`dockerfile
# Build stage
FROM node:16-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

# Production stage
FROM node:16-alpine AS production
WORKDIR /app
COPY --from=builder /app/node_modules ./node_modules
COPY . .
EXPOSE 3000
USER node
CMD ["npm", "start"]
\`\`\`

**Optimization Techniques:**
‚Ä¢ **Use specific tags** instead of 'latest' for reproducible builds
‚Ä¢ **Minimize layers** by combining RUN commands
‚Ä¢ **Use .dockerignore** to exclude unnecessary files
‚Ä¢ **Run as non-root user** for security
‚Ä¢ **Use multi-stage builds** to reduce final image size
‚Ä¢ **Leverage build cache** by ordering instructions properly

**Docker Compose for Multi-container Applications:**
\`\`\`yaml
version: '3.8'
services:
  web:
    build: .
    ports:
      - "8080:80"
    depends_on:
      - db
    environment:
      - DATABASE_URL=postgresql://user:pass@db:5432/mydb
  
  db:
    image: postgres:13
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
\`\`\`

**Networking:**
‚Ä¢ **Bridge Network** - Default network for containers on same host
‚Ä¢ **Host Network** - Container shares host's network stack
‚Ä¢ **Overlay Network** - Multi-host networking for Docker Swarm
‚Ä¢ **Custom Networks** - User-defined networks for container communication

**Storage and Volumes:**
‚Ä¢ **Bind Mounts** - Mount host directory into container
‚Ä¢ **Named Volumes** - Docker-managed storage with lifecycle management
‚Ä¢ **tmpfs Mounts** - Temporary filesystem in memory
‚Ä¢ **Volume Drivers** - Third-party storage solutions

**Security Best Practices:**

**Image Security:**
‚Ä¢ Use official base images from trusted sources
‚Ä¢ Regularly update base images and dependencies
‚Ä¢ Scan images for vulnerabilities (docker scan, Trivy, Clair)
‚Ä¢ Use minimal base images (Alpine, distroless)

**Runtime Security:**
‚Ä¢ Run containers as non-root user
‚Ä¢ Use read-only filesystems when possible
‚Ä¢ Limit container capabilities and system calls
‚Ä¢ Implement resource constraints (CPU, memory)
‚Ä¢ Use secrets management for sensitive data

**Production Considerations:**

**Logging and Monitoring:**
‚Ä¢ Configure logging drivers for centralized logging
‚Ä¢ Implement health checks for container monitoring
‚Ä¢ Use monitoring tools (Prometheus, Grafana, DataDog)
‚Ä¢ Set up alerting for container failures

**Orchestration:**
‚Ä¢ Use Kubernetes for production container orchestration
‚Ä¢ Implement proper service discovery and load balancing
‚Ä¢ Configure auto-scaling based on metrics
‚Ä¢ Plan for disaster recovery and backup strategies

**Common Use Cases:**
‚Ä¢ **Application Packaging** - Consistent deployment across environments
‚Ä¢ **Microservices** - Isolate and scale individual services
‚Ä¢ **CI/CD Pipelines** - Build, test, and deploy applications
‚Ä¢ **Development Environments** - Standardized development setups
‚Ä¢ **Legacy Application Modernization** - Containerize existing applications

Would you like me to dive deeper into any specific Docker concept, such as networking, security, or optimization techniques?`;
    }
    
    // Programming questions
    if (lowerQuestion.includes('python') || lowerQuestion.includes('javascript') || lowerQuestion.includes('java') || lowerQuestion.includes('programming') || lowerQuestion.includes('code')) {
      return `I can help you with programming and software development across multiple languages and technologies.

**Programming Languages I can assist with:**

**Python:**
‚Ä¢ **Web Development** - Django, Flask, FastAPI frameworks
‚Ä¢ **Data Science** - NumPy, Pandas, Matplotlib, Scikit-learn
‚Ä¢ **Machine Learning** - TensorFlow, PyTorch, Keras
‚Ä¢ **Automation** - Scripting, web scraping, task automation
‚Ä¢ **Best Practices** - PEP 8, virtual environments, testing with pytest

**JavaScript/TypeScript:**
‚Ä¢ **Frontend** - React, Vue.js, Angular, vanilla JavaScript
‚Ä¢ **Backend** - Node.js, Express.js, NestJS
‚Ä¢ **Full-stack** - MEAN, MERN, JAMstack architectures
‚Ä¢ **Modern Features** - ES6+, async/await, modules, TypeScript types
‚Ä¢ **Testing** - Jest, Cypress, Testing Library

**Java:**
‚Ä¢ **Enterprise Development** - Spring Boot, Spring Framework
‚Ä¢ **Microservices** - Spring Cloud, service mesh patterns
‚Ä¢ **Build Tools** - Maven, Gradle
‚Ä¢ **Testing** - JUnit, Mockito, integration testing
‚Ä¢ **Performance** - JVM tuning, profiling, optimization

**Other Languages:**
‚Ä¢ **Go** - Concurrency, web services, CLI tools
‚Ä¢ **C#/.NET** - ASP.NET Core, Entity Framework, Azure integration
‚Ä¢ **Rust** - Systems programming, memory safety, performance
‚Ä¢ **PHP** - Laravel, Symfony, modern PHP practices

**Software Development Concepts:**

**Architecture Patterns:**
‚Ä¢ **MVC/MVP/MVVM** - Separation of concerns in applications
‚Ä¢ **Microservices** - Distributed system design and communication
‚Ä¢ **Event-Driven Architecture** - Asynchronous processing and messaging
‚Ä¢ **Clean Architecture** - Dependency inversion and testable code
‚Ä¢ **Domain-Driven Design** - Business logic organization

**Best Practices:**
‚Ä¢ **SOLID Principles** - Object-oriented design principles
‚Ä¢ **Code Quality** - Linting, formatting, code reviews
‚Ä¢ **Testing** - Unit, integration, end-to-end testing strategies
‚Ä¢ **Documentation** - API documentation, code comments, README files
‚Ä¢ **Version Control** - Git workflows, branching strategies

**Development Tools and Practices:**

**IDEs and Editors:**
‚Ä¢ **VS Code** - Extensions, debugging, integrated terminal
‚Ä¢ **IntelliJ IDEA** - Java development, refactoring tools
‚Ä¢ **PyCharm** - Python development, scientific tools
‚Ä¢ **Vim/Neovim** - Efficient text editing and customization

**DevOps Integration:**
‚Ä¢ **CI/CD Pipelines** - GitHub Actions, GitLab CI, Jenkins
‚Ä¢ **Containerization** - Docker, Kubernetes deployment
‚Ä¢ **Infrastructure as Code** - Terraform, CloudFormation
‚Ä¢ **Monitoring** - Application performance monitoring, logging

**Database Integration:**
‚Ä¢ **Relational Databases** - PostgreSQL, MySQL, SQL optimization
‚Ä¢ **NoSQL Databases** - MongoDB, Redis, DynamoDB
‚Ä¢ **ORMs and Query Builders** - SQLAlchemy, Hibernate, Prisma
‚Ä¢ **Database Design** - Normalization, indexing, performance tuning

**API Development:**
‚Ä¢ **REST APIs** - Design principles, HTTP methods, status codes
‚Ä¢ **GraphQL** - Schema design, resolvers, query optimization
‚Ä¢ **Authentication** - JWT, OAuth 2.0, session management
‚Ä¢ **API Documentation** - OpenAPI/Swagger, Postman collections

**Example Code Assistance:**

I can help you with:
‚Ä¢ **Code Review** - Identify issues and suggest improvements
‚Ä¢ **Debugging** - Troubleshoot errors and performance problems
‚Ä¢ **Algorithm Implementation** - Data structures, sorting, searching
‚Ä¢ **Design Patterns** - Singleton, Factory, Observer, Strategy patterns
‚Ä¢ **Code Optimization** - Performance improvements and refactoring

**Learning Resources and Career Guidance:**
‚Ä¢ **Skill Development** - Learning paths for different technologies
‚Ä¢ **Project Ideas** - Portfolio projects and practical applications
‚Ä¢ **Interview Preparation** - Coding challenges, system design questions
‚Ä¢ **Industry Trends** - Emerging technologies and best practices

What specific programming topic, language, or challenge would you like help with? I can provide code examples, explain concepts, or help troubleshoot specific issues you're facing.`;
    }
    
    // Default comprehensive response for any topic
    return `I'm Amazon Q, and I can provide comprehensive assistance on a wide range of topics. Based on your question about "${question}", let me help you with detailed information and guidance.

**How I can assist you:**

**üîß Technical Topics:**
‚Ä¢ **Software Development** - Programming languages, frameworks, best practices
‚Ä¢ **Cloud Computing** - AWS services, architecture, migration strategies
‚Ä¢ **DevOps** - CI/CD, containerization, infrastructure automation
‚Ä¢ **Data & Analytics** - Databases, data processing, machine learning
‚Ä¢ **Security** - Best practices, compliance, threat mitigation

**üìö Learning & Problem Solving:**
‚Ä¢ **Concept Explanations** - Break down complex topics into understandable parts
‚Ä¢ **Step-by-step Guidance** - Detailed tutorials and implementation guides
‚Ä¢ **Best Practices** - Industry standards and proven approaches
‚Ä¢ **Troubleshooting** - Identify issues and provide solutions
‚Ä¢ **Career Guidance** - Skill development and professional growth

**üí° Approach to Your Question:**
To provide the most helpful response about "${question}", I can:

‚Ä¢ **Explain the fundamentals** - Core concepts and principles
‚Ä¢ **Provide practical examples** - Real-world applications and use cases
‚Ä¢ **Share best practices** - Proven approaches and recommendations
‚Ä¢ **Offer implementation guidance** - Step-by-step instructions
‚Ä¢ **Suggest learning resources** - Further reading and skill development

**Getting More Specific Help:**
For the most tailored assistance, you could:
‚Ä¢ **Specify your context** - Are you learning, implementing, or troubleshooting?
‚Ä¢ **Share your experience level** - Beginner, intermediate, or advanced?
‚Ä¢ **Describe your goals** - What are you trying to achieve?
‚Ä¢ **Mention constraints** - Any specific requirements or limitations?

**Popular Topics I Excel At:**
‚Ä¢ **AWS Services** - EC2, S3, Lambda, RDS, VPC, and 200+ other services
‚Ä¢ **Kubernetes** - Container orchestration, deployments, best practices
‚Ä¢ **Programming** - Python, JavaScript, Java, Go, and many other languages
‚Ä¢ **Architecture** - System design, microservices, scalability patterns
‚Ä¢ **Security** - Cloud security, application security, compliance

What specific aspect of "${question}" would you like me to focus on? I'm designed to provide detailed, practical, and actionable information to help you succeed.`;
  };

  // Security function to validate and sanitize user input
  const validateAndSanitizeInput = (input) => {
    if (!input || input.trim().length === 0) {
      return { valid: false, error: 'Please enter a question' };
    }

    const sanitized = input.trim();
    
    // Security: Block dangerous patterns
    const blockedPatterns = [
      // MCP server usage
      /mcp[_-]?server/i,
      /mcp.*invoke/i,
      /mcp.*tool/i,
      
      // AWS service creation/modification
      /aws\s+.*create/i,
      /aws\s+.*delete/i,
      /aws\s+.*modify/i,
      /aws\s+.*update/i,
      /aws\s+.*deploy/i,
      /aws\s+.*launch/i,
      /aws\s+.*terminate/i,
      
      // Infrastructure deployment
      /terraform\s+apply/i,
      /terraform\s+destroy/i,
      /cdk\s+deploy/i,
      /kubectl\s+create/i,
      /kubectl\s+apply/i,
      /docker\s+run/i,
      
      // Command injection attempts
      /\$\(/,
      /`.*`/,
      /\|\s*sh/i,
      /\|\s*bash/i,
      /sudo/i
    ];
    
    const isBlocked = blockedPatterns.some(pattern => pattern.test(sanitized));
    
    if (isBlocked) {
      return { 
        valid: false, 
        error: 'Security Restriction: This request contains commands that could affect cloud services. Please ask conceptual questions instead.',
        suggestion: 'Try asking: "How does AWS S3 work?" instead of "Create an S3 bucket"'
      };
    }
    
    if (sanitized.length > 500) {
      return { valid: false, error: 'Question is too long. Please keep it under 500 characters.' };
    }
    
    return { valid: true, sanitized };
  };

  const handleSendMessage = async (messageText) => {
    // Security validation
    const validation = validateAndSanitizeInput(messageText);
    if (!validation.valid) {
      const errorMessage = {
        id: Date.now(),
        text: `üö´ **${validation.error}**${validation.suggestion ? `\n\nüí° **Suggestion:** ${validation.suggestion}` : ''}`,
        isBot: true,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
      setMessage('');
      return;
    }

    const sanitizedMessage = validation.sanitized;

    const userMessage = {
      id: Date.now(),
      text: sanitizedMessage,
      isBot: false,
      timestamp: new Date()
    };

    const newMessages = [...messages, userMessage];
    setMessages(newMessages);
    setMessage('');
    setIsTyping(true);

    // Update conversation context
    setConversationContext(prev => [...prev.slice(-10), sanitizedMessage]);

    setTimeout(async () => {
      try {
        console.log('Getting intelligent response for:', sanitizedMessage);
        
        let botResponse = generateComprehensiveAmazonQResponse(sanitizedMessage);

        // Check if this should use Amazon Q CLI
        if (shouldUseAmazonQ(sanitizedMessage)) {
          console.log('Routing to Amazon Q CLI...');
          
          try {
            const qResponse = await amazonQ.query(sanitizedMessage, '', 'portfolio-user');
            const formattedResponse = amazonQ.formatResponse(qResponse, sanitizedMessage);
            botResponse = formattedResponse;
          } catch (qError) {
            console.error('Amazon Q error, using fallback:', qError);
            botResponse = `ü§ñ **AWS Question Detected**\n\nI can help with AWS and DevOps topics! While Amazon Q CLI is not available right now, I can still provide comprehensive information about:\n\n‚Ä¢ **AWS Services:** EC2, S3, Lambda, RDS, VPC, CloudFormation\n‚Ä¢ **DevOps Tools:** Kubernetes, Docker, Terraform, CI/CD\n‚Ä¢ **Best Practices:** Security, cost optimization, architecture\n‚Ä¢ **Troubleshooting:** Common issues and solutions\n\nWhat specific AWS or DevOps topic would you like me to explain?`;
          }
        } else {
          // Handle different types of questions
          const lowerMessage = sanitizedMessage.toLowerCase();
          
          // Real-time information queries
          if (lowerMessage.includes('date') || lowerMessage.includes('today') || lowerMessage.includes('time')) {
            const now = new Date();
            const dateOptions = { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            };
            const timeOptions = { 
              hour: '2-digit', 
              minute: '2-digit', 
              second: '2-digit',
              timeZoneName: 'short'
            };
            
            const currentDate = now.toLocaleDateString('en-US', dateOptions);
            const currentTime = now.toLocaleTimeString('en-US', timeOptions);
            const timestamp = now.toISOString();
            
            botResponse = `üìÖ **Current Date & Time Information**

**Today's Date:** ${currentDate}
**Current Time:** ${currentTime}
**ISO Timestamp:** ${timestamp}
**Unix Timestamp:** ${now.getTime()}

**Additional Information:**
‚Ä¢ **Day of Year:** ${Math.floor((now - new Date(now.getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24))}
‚Ä¢ **Week Number:** ${Math.ceil(((now - new Date(now.getFullYear(), 0, 1)) / 86400000 + new Date(now.getFullYear(), 0, 1).getDay() + 1) / 7)}
‚Ä¢ **Quarter:** Q${Math.floor((now.getMonth() + 3) / 3)} ${now.getFullYear()}
‚Ä¢ **Season:** ${getSeason(now)}

**Time Zone Information:**
‚Ä¢ **Your Local Time Zone:** ${Intl.DateTimeFormat().resolvedOptions().timeZone}
‚Ä¢ **UTC Offset:** ${now.getTimezoneOffset() / -60} hours

**Fun Facts:**
‚Ä¢ This year ${now.getFullYear()} ${isLeapYear(now.getFullYear()) ? 'is' : 'is not'} a leap year
‚Ä¢ Days until New Year: ${Math.ceil((new Date(now.getFullYear() + 1, 0, 1) - now) / (1000 * 60 * 60 * 24))}
‚Ä¢ Days since New Year: ${Math.floor((now - new Date(now.getFullYear(), 0, 1)) / (1000 * 60 * 60 * 24)) + 1}

Is there anything specific about dates, times, or calendars you'd like to know more about?`;
          }
          
          // Weather queries
          else if (lowerMessage.includes('weather')) {
            botResponse = `üå§Ô∏è **Weather Information**

I don't have access to real-time weather data, but I can help you understand weather and direct you to reliable sources:

**For Current Weather:**
‚Ä¢ **Weather.com** - Comprehensive forecasts and radar
‚Ä¢ **AccuWeather** - Detailed local conditions
‚Ä¢ **National Weather Service** - Official government forecasts
‚Ä¢ **Weather apps** on your phone for location-based updates

**Understanding Weather:**
‚Ä¢ **Temperature** - Affected by season, latitude, altitude, and proximity to water
‚Ä¢ **Precipitation** - Rain, snow, sleet depend on atmospheric moisture and temperature
‚Ä¢ **Pressure Systems** - High pressure brings clear skies, low pressure brings storms
‚Ä¢ **Humidity** - Amount of water vapor in the air affects comfort

**Weather Patterns:**
‚Ä¢ **Fronts** - Boundaries between air masses cause weather changes
‚Ä¢ **Seasonal Variations** - Predictable patterns based on Earth's tilt and orbit
‚Ä¢ **Local Effects** - Mountains, lakes, and urban areas create microclimates

**Climate vs Weather:**
‚Ä¢ **Weather** - Short-term atmospheric conditions (daily/weekly)
‚Ä¢ **Climate** - Long-term patterns over decades
‚Ä¢ **Climate Change** - Long-term shifts in global weather patterns

For accurate, up-to-date weather information for your specific location, I recommend checking your local weather service or a reliable weather app.

What specific weather topic would you like me to explain?`;
          }
          
          // Current events and news
          else if (lowerMessage.includes('news') || lowerMessage.includes('current events') || lowerMessage.includes('latest')) {
            botResponse = `üì∞ **Current Events & News**

I don't have access to real-time news feeds, but I can guide you to reliable news sources and help you understand how to stay informed:

**Reliable News Sources:**
‚Ä¢ **Reuters** - International news agency, factual reporting
‚Ä¢ **Associated Press (AP)** - Non-profit news cooperative
‚Ä¢ **BBC News** - British public service broadcaster
‚Ä¢ **NPR** - National Public Radio, in-depth analysis
‚Ä¢ **PBS NewsHour** - Public television news program

**News Categories:**
‚Ä¢ **Breaking News** - Immediate, developing stories
‚Ä¢ **Politics** - Government, elections, policy changes
‚Ä¢ **Business** - Markets, economy, corporate news
‚Ä¢ **Technology** - Innovation, cybersecurity, digital trends
‚Ä¢ **Science** - Research, discoveries, health developments
‚Ä¢ **International** - Global events, diplomacy, conflicts

**Media Literacy Tips:**
‚Ä¢ **Check Multiple Sources** - Cross-reference important stories
‚Ä¢ **Verify Information** - Look for primary sources and official statements
‚Ä¢ **Understand Bias** - All sources have some perspective
‚Ä¢ **Fact-Check** - Use sites like Snopes, FactCheck.org, PolitiFact
‚Ä¢ **Be Skeptical** - Question sensational headlines and unverified claims

**Staying Informed:**
‚Ä¢ **News Aggregators** - Google News, Apple News for diverse perspectives
‚Ä¢ **Newsletters** - Curated content from trusted journalists
‚Ä¢ **Podcasts** - In-depth analysis and discussion
‚Ä¢ **Social Media** - Useful for breaking news but verify through reliable sources

**Current Global Trends (General):**
‚Ä¢ **Technology** - AI development, cybersecurity, space exploration
‚Ä¢ **Climate** - Environmental policies, renewable energy adoption
‚Ä¢ **Geopolitics** - International relations, trade agreements
‚Ä¢ **Health** - Medical breakthroughs, public health initiatives

What type of current information or news topic interests you most?`;
          }
          
          else if (lowerMessage.includes('vaibhav')) {
            botResponse = `üë®‚Äçüíª **About Vaibhav**\n\nVaibhav is a Senior DevOps Engineer at Inexture Solutions with extensive experience in:\n\n**Technical Expertise:**\n‚Ä¢ **Cloud Platforms:** AWS (certified), Azure, GCP\n‚Ä¢ **Container Orchestration:** Kubernetes, Docker, ECS/EKS\n‚Ä¢ **Infrastructure as Code:** Terraform, CloudFormation, CDK\n‚Ä¢ **CI/CD:** Jenkins, GitLab CI, GitHub Actions, AWS CodePipeline\n‚Ä¢ **Monitoring:** Prometheus, Grafana, CloudWatch, ELK Stack\n\n**Professional Experience:**\n‚Ä¢ Designing and implementing scalable cloud architectures\n‚Ä¢ Automating deployment pipelines and infrastructure provisioning\n‚Ä¢ Optimizing costs and performance for enterprise applications\n‚Ä¢ Leading DevOps transformation initiatives\n‚Ä¢ Mentoring junior engineers and driving best practices\n\n**Certifications:**\n‚Ä¢ AWS Certified Solutions Architect\n‚Ä¢ Kubernetes Administrator (CKA)\n‚Ä¢ Terraform Associate\n\n**Key Achievements:**\n‚Ä¢ Reduced deployment time by 80% through automation\n‚Ä¢ Implemented multi-region disaster recovery solutions\n‚Ä¢ Led migration of legacy applications to cloud-native architectures\n‚Ä¢ Established monitoring and alerting systems for 99.9% uptime\n\nWhat specific aspect of Vaibhav's experience would you like to know more about?`;
          } else if (lowerMessage.includes('kubernetes') || lowerMessage.includes('docker')) {
            botResponse = `üöÄ **Container Technologies**\n\n**Kubernetes:**\nKubernetes is a powerful container orchestration platform that automates deployment, scaling, and management of containerized applications.\n\n**Key Concepts:**\n‚Ä¢ **Pods:** Smallest deployable units containing one or more containers\n‚Ä¢ **Services:** Stable network endpoints for accessing pods\n‚Ä¢ **Deployments:** Manage replica sets and rolling updates\n‚Ä¢ **ConfigMaps & Secrets:** Configuration and sensitive data management\n‚Ä¢ **Ingress:** HTTP/HTTPS routing to services\n\n**Docker:**\nDocker provides containerization technology for packaging applications with their dependencies.\n\n**Benefits:**\n‚Ä¢ **Consistency:** Same environment across development, testing, and production\n‚Ä¢ **Portability:** Run anywhere Docker is supported\n‚Ä¢ **Efficiency:** Lightweight compared to virtual machines\n‚Ä¢ **Scalability:** Easy horizontal scaling\n‚Ä¢ **Isolation:** Applications run in isolated environments\n\n**Best Practices:**\n‚Ä¢ Use multi-stage builds to optimize image size\n‚Ä¢ Implement health checks for reliability\n‚Ä¢ Follow security best practices (non-root users, minimal base images)\n‚Ä¢ Use proper resource limits and requests\n‚Ä¢ Implement proper logging and monitoring\n\nWhat specific aspect of containerization would you like me to explain further?`;
          } else {
            // General response for other topics
            botResponse = `ü§ñ **I'm here to help with "${messageText}"!**\n\nI can provide comprehensive information on a wide range of topics:\n\n**üî¨ Science & Technology:**\n‚Ä¢ Physics, Chemistry, Biology, Mathematics\n‚Ä¢ Artificial Intelligence, Quantum Computing\n‚Ä¢ Software Development, Programming Languages\n\n**üìö Knowledge & Learning:**\n‚Ä¢ History, Geography, Literature, Philosophy\n‚Ä¢ Social Sciences, Psychology, Economics\n‚Ä¢ Current Events and Analysis\n\n**üíº Professional Topics:**\n‚Ä¢ DevOps, Cloud Computing, AWS Services\n‚Ä¢ Business Strategy, Finance, Career Guidance\n‚Ä¢ Project Management, Leadership\n\n**üåç Practical Information:**\n‚Ä¢ How things work, Step-by-step guides\n‚Ä¢ Problem-solving approaches\n‚Ä¢ Best practices and recommendations\n\nCould you be more specific about what aspect of "${messageText}" you'd like me to explain? The more details you provide, the better I can tailor my response to your needs!`;
          }
        }
        
        const botMessage = {
          id: Date.now() + 1,
          text: botResponse,
          isBot: true,
          timestamp: new Date()
        };

        setMessages(prev => [...prev, botMessage]);
      } catch (error) {
        console.error('Chatbot error:', error);
        const errorMessage = {
          id: Date.now() + 1,
          text: "ü§ñ **I'm here to help!**\n\nI can provide detailed information about:\n‚Ä¢ Vaibhav's DevOps experience and achievements\n‚Ä¢ Kubernetes, Terraform, AWS, and cloud technologies\n‚Ä¢ DevOps career guidance and best practices\n\nWhat would you like to know? üöÄ",
          isBot: true,
          timestamp: new Date()
        };
        setMessages(prev => [...prev, errorMessage]);
      } finally {
        setIsTyping(false);
      }
    }, 1200 + Math.random() * 800);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage(message);
    }
  };

  const formatMessage = (text) => {
    return text
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/`(.*?)`/g, '<code class="bg-gray-100 dark:bg-gray-700 px-1 rounded text-sm">$1</code>')
      .replace(/```([\s\S]*?)```/g, '<pre class="bg-gray-100 dark:bg-gray-700 p-3 rounded mt-2 overflow-x-auto text-sm"><code>$1</code></pre>')
      .replace(/\n/g, '<br>');
  };

  return (
    <>
      {/* Chatbot Toggle Button */}
      <motion.button
        onClick={() => setIsOpen(!isOpen)}
        className="fixed bottom-6 right-6 z-50 w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-full shadow-2xl transition-all duration-300 flex items-center justify-center"
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        animate={{ 
          rotate: isOpen ? 180 : 0,
          backgroundColor: isOpen ? '#dc2626' : '#2563eb'
        }}
      >
        {isOpen ? (
          <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        ) : (
          <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
          </svg>
        )}
      </motion.button>

      {/* Chatbot Window */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, scale: 0.8, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.8, y: 20 }}
            className="fixed bottom-24 right-6 z-40 w-96 h-[600px] bg-white dark:bg-gray-800 rounded-2xl shadow-2xl border border-gray-200 dark:border-gray-700 flex flex-col overflow-hidden"
          >
            {/* Header */}
            <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-4 flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center">
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                  </svg>
                </div>
                <div>
                  <h3 className="font-bold text-lg">Amazon Q</h3>
                  <p className="text-sm opacity-90">
                    AI Assistant
                  </p>
                </div>
              </div>
            </div>

            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50 dark:bg-gray-900">
              {messages.map((msg) => (
                <motion.div
                  key={msg.id}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className={`flex ${msg.isBot ? 'justify-start' : 'justify-end'}`}
                >
                  <div className={`max-w-[85%] p-3 rounded-2xl ${
                    msg.isBot 
                      ? 'bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 shadow-md' 
                      : 'bg-gradient-to-r from-blue-600 to-purple-600 text-white'
                  }`}>
                    <div 
                      className="text-sm leading-relaxed"
                      dangerouslySetInnerHTML={{ __html: formatMessage(msg.text) }}
                    />
                    <div className={`text-xs mt-2 opacity-70 ${msg.isBot ? 'text-gray-500' : 'text-white/70'}`}>
                      {msg.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                      {msg.source && ` ‚Ä¢ ${msg.source}`}
                    </div>
                  </div>
                </motion.div>
              ))}
              
              {isTyping && (
                <motion.div
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="flex justify-start"
                >
                  <div className="bg-white dark:bg-gray-800 p-3 rounded-2xl shadow-md">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </motion.div>
              )}
              <div ref={messagesEndRef} />
            </div>

            {/* Input */}
            <div className="p-4 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700">
              <div className="flex space-x-2">
                <input
                  type="text"
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Ask me anything..."
                  className="flex-1 p-3 border border-gray-300 dark:border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white text-sm"
                  disabled={isTyping}
                />
                <motion.button
                  onClick={() => handleSendMessage(message)}
                  disabled={isTyping || !message.trim()}
                  className="p-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl hover:from-blue-700 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                  </svg>
                </motion.button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default ImprovedChatbot;
